name: Built Openwrt-v23.05-R4AGv2

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH 连接至 Actions'
        required: false 
        default: 'false'

env:
  REPO_URL: https://github.com/openwrt/openwrt.git          # OpenWrt 官方仓库
  REPO_BRANCH: v23.05.0                                    # 编译版本（建议使用稳定版）
  FEEDS_CONF: opwrt-23.05/Opwrt-23.05_feeds.conf.default   # 自定义软件源配置
  CONFIG_FILE: opwrt-23.05/Opwrt-R4AGv2.config             # 自定义编译配置
  DIY_P1_SH: opwrt-23.05/Opwrt-p1_feeds.sh                 # 自定义 feeds 脚本
  DIY_P2_SH: opwrt-23.05/Opwrt-p2_config.sh                # 自定义配置脚本
  DIY_P3_SH: opwrt-23.05/Opwrt-p3_mv.sh                    # 自定义文件移动脚本
  PATCH_FILE: 476-mtd-spi-nor-add-eon-en25q128.patch       # 硬件补丁文件
  UPLOAD_BIN_DIR: true                                     # 上传二进制目录
  UPLOAD_FIRMWARE: true                                    # 上传固件文件
  UPLOAD_COWTRANSFER: false                                # 禁用 Cowtransfer 上传
  UPLOAD_WETRANSFER: false                                 # 禁用 WeTransfer 上传
  UPLOAD_RELEASE: true                                     # 发布到 GitHub Release
  TZ: Asia/Shanghai                                        # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04                                   # 使用受支持的 Ubuntu 版本（替代即将淘汰的 20.04）

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get -qq update
        
        # 安装编译依赖（适配 Ubuntu 22.04，移除过时的 lib32gcc1，使用 gcc-multilib）
        sudo apt-get -qq install -y --no-install-recommends \
          asciidoc patch libc6-dev-i386 uglifyjs git-core \
          p7zip p7zip-full msmtp texinfo libglib2.0-dev xmlto qemu-utils upx \
          autoconf automake libtool autopoint device-tree-compiler g++-multilib \
          antlr3 gperf curl binutils bzip2 flex gawk grep libc-dev libz-dev \
          perl python3 rsync subversion unzip build-essential clang \
          g++ gcc-multilib gettext libncurses5-dev libssl-dev python3-distutils \
          ccache ecj fastjar file libelf-dev libncursesw5-dev wget \
          python3-setuptools python3-dev swig time xsltproc fxload
        
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆 OpenWrt 源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --single-branch --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo $GITHUB_WORKSPACE

    - name: 上传硬件配置文件（适用于小米 R4AGv2）
      run: |
        # 替换为你的硬件配置文件路径（根据仓库结构调整）
        cp -f $GITHUB_WORKSPACE/opwrt-23.05/hw2add/01_leds $GITHUB_WORKSPACE/openwrt/target/linux/ramips/mt7621/base-files/etc/board.d
        cp -f $GITHUB_WORKSPACE/opwrt-23.05/hw2add/02_network $GITHUB_WORKSPACE/openwrt/target/linux/ramips/mt7621/base-files/etc/board.d
        cp -f $GITHUB_WORKSPACE/opwrt-23.05/hw2add/mt7621_xiaomi_mi-router-4a-gigabit-v2.dts $GITHUB_WORKSPACE/openwrt/target/linux/ramips/dts
        cp -f $GITHUB_WORKSPACE/opwrt-23.05/hw2add/mt7621.mk $GITHUB_WORKSPACE/openwrt/target/linux/ramips/image

    - name: 加载自定义软件源（添加 SSR+ 源）
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
        # 添加 helloworld 源（包含 luci-app-ssr-plus）
        echo "src-git helloworld https://github.com/fw876/helloworld.git" >> openwrt/feeds.conf.default
        
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件包
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置（启用 SSR+ 插件）
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        
        # 手动追加 SSR+ 配置（确保 .config 中不存在重复项）
        echo -e "\n# SSR+ 插件配置" >> openwrt/.config
        echo "CONFIG_PACKAGE_luci-app-ssr-plus=y" >> openwrt/.config
        echo "CONFIG_PACKAGE_luci-i18n-ssr-plus-zh-cn=y" >> openwrt/.config
        echo "CONFIG_PACKAGE_shadowsocksr-libev-ss-local=y" >> openwrt/.config
        
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 上传自定义文件
      run: |
        chmod +x $DIY_P3_SH
        $GITHUB_WORKSPACE/$DIY_P3_SH

    - name: SSH 连接（调试用）
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true'
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo "开始编译（$(nproc) 线程）"
        make -j$(nproc) || make -j1 || make -j1 V=sc
        echo "::set-output name=status::success"
        
        # 提取设备名称（用于固件命名）
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传二进制文件
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件（指定具体架构路径）
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 小米 R4AGv2 架构为 ramips/mt7621，需根据实际路径调整
        cd openwrt/bin/targets/ramips/mt7621/
        rm -rf packages  # 删除冗余的软件包目录
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 上传固件文件
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      if: steps.compile.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.compile.outputs.status == 'success' && format('v%s-%s', env.REPO_BRANCH, env.FILE_DATE) || 'unknown' }}
        body: 编译时间：${{ github.run_attempt }} | 架构：ramips/mt7621
        files: ${{ env.FIRMWARE }}/*

    - name: 清理旧工作流
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 2

    - name: 清理旧版本
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
